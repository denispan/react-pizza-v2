import React from "react";

import {useSelector, useDispatch} from "react-redux";
import {selectFilterData, setCurrentPage, setFilters} from "../redux/slices/filterSlice";

import {fetchPizzas, selectPizzasSlice} from "../redux/slices/pizzasSlice";

import {Link, useNavigate} from 'react-router-dom';

import qs from "qs";

import Categories from "../components/Categories";
import Sort, {sortList} from "../components/Sort";
import PizzaBlock from "../components/PizzaBlock";
import Skeleton from "../components/PizzaBlock/Skeleton";
import Pagination from "../components/Pagination";

const skeletonArray = [...new Array(4)];

function Home() {

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);

  const {items, status} = useSelector(selectPizzasSlice);

  const {categoryId, sort, order, currentPage, searchValue} = useSelector(selectFilterData);

  const onChangeCurrentPage = (page) => {
    dispatch(setCurrentPage(page));
  }


  //desc - –ø–æ —É–±—ã–≤–∞–Ω–∏—é
  //asc - –ø–æ –≤–æ–∑—Ä–∞—Ç—Å–∞–Ω–∏—é

  const getPizzas = async () => {
    dispatch(fetchPizzas({
      currentPage,
      categoryId,
      sort,
      order
    }));
  };

  //–ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –Ω–µ –≤—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É. –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Ç–æ
  React.useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sort: sort.sortProperty,
        categoryId,
        order,
        currentPage,
      });

      navigate(`?${queryString}`);
    }

    isMounted.current = true;
  }, [categoryId, sort, order, currentPage]);

  //–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥–∞–∫—Å–µ
  React.useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));

      const sort = sortList.find(obj => obj.sortProperty === params.sort);

      dispatch(
        setFilters({
          ...params,
          sort
        }),
      );

      isSearch.current = true;
    }
  }, [])

  //–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
  React.useEffect(() => {
    window.scrollTo(0, 0);
    if (!isSearch.current) {
      getPizzas();
    }

    isSearch.current = false;
  }, [categoryId, sort, order, currentPage]);

  const pizzas = items.filter((obj) =>
    obj.title.toLowerCase().includes(searchValue.toLowerCase())
  ).map((obj) => (
    <PizzaBlock key={obj.id} {...obj} />
  ));

  const skeletons = skeletonArray.map((_, i) => (<Skeleton key={i}/>));

  return (
    <div className="container">
      <div className="content__top">
        <Categories/>
        <Sort/>
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      { status === "error" ?
        <div className="content__error">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∑–∂–µ</p>
        </div>
        :
        <div className="content__items">
          { status === 'success' ? pizzas : skeletons }
        </div>
      }
      <Pagination onChangePage={onChangeCurrentPage}/>
    </div>
  )
}

export default Home;
